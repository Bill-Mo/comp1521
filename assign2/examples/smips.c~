#include <stdio.h>
#define MAX_CODE 1000
#define REGISTERS 31

int bit_pattern_translation (int hexNum);
int main (int argc, char * argv[]) {
    /*FILE * hex = fopen(argv[1], "r");
    int i = 0;
    int registers[REGISTERS];
    while (i < REGISTERS) {
        registers[i] = 0;
        i++;
    }
    int code[MAX_CODE];
    i = 0;
    while (i < MAX_CODE && fscanf(hex, "%x", &code[i]) == 1) {
        i++;
    }
    
    int j = 0;
    while (j < i) {
        
        j++;
    }*/
    a[4] = bit_pattern_translation(0xa);
    printf("%d %d %d %d\n", a[0], a[1], a[2], a[3]);
    return 0;
}

int bit_pattern_translation (int hexNum) {
    int bits[4];
    if (hexNum == 0x0) {
        bits = {0, 0, 0, 0};
    } else if (hexNum == 0x1) {
        bits = {0, 0, 0, 1};
    } else if (hexNum == 0x2) {
        bits = {0, 0, 1, 0};
    } else if (hexNum == 0x3) {
        bits = {0, 0, 1, 1};
    } else if (hexNum == 0x4) {
        bits = {0, 1, 0, 0};
    } else if (hexNum == 0x5) {
        bits = {0, 1, 0, 1};
    } else if (hexNum == 0x6) {
        bits = {0, 1, 1, 0};
    } else if (hexNum == 0x7) {
        bits = {0, 1, 1, 1};
    } else if (hexNum == 0x8) {
        bits = {1, 0, 0, 0};
    } else if (hexNum == 0x9) {
        bits = {1, 0, 0, 1};
    } else if (hexNum == 0xa) {
        bits = {1, 0, 1, 0};
    } else if (hexNum == 0xb) {
        bits = {1, 0, 1, 1};
    } else if (hexNum == 0xc) {
        bits = {1, 1, 0, 0};
    } else if (hexNum == 0xd) {
        bits = {1, 1, 0, 1};
    } else if (hexNum == 0xe) {
        bits = {1, 1, 1, 0};
    } else if (hexNum == 0xf) {
        bits = {1, 1, 1, 1};
    } else {
        return -1;
    }
    return 1;
}
